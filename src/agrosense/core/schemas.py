from pydantic import BaseModel, Field, ValidationError
from typing import List, Literal, Optional, Dict, Any
from enum import Enum
from datetime import datetime


class AssetType(str, Enum):
    """Defines the supported agricultural asset types for RAG filtering and routing."""
    CROP = "CROP"
    LIVESTOCK = "LIVESTOCK"
    GENERAL = "GENERAL"

class IntentType(str, Enum):
    """Defines the core intention of the user's query for routing (from tasks.yaml)."""
    # These values must match the strings used by the Orchestrator Agent
    DISEASE_DIAGNOSIS = "disease_diagnosis"
    PEST_MANAGEMENT = "pest_management"
    WEATHER_ADVISORY = "weather_advisory"
    MARKET_PRICES = "market_prices"
    GENERAL_ADVICE = "general_advice"

class Severity(str, Enum):
    """Defines the severity level for critical alerts (used by ActionAgent)."""
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"
    CRITICAL = "CRITICAL"

#Tool Input/Output Schemas

class SourceDocument(BaseModel):
    """Represents a single document chunk retrieved from the Vector Store."""
    content: str = Field(..., description="The relevant text content of the chunk.")
    source: str = Field(..., description="The name of the document file.")
    page: int = Field(..., description="The page number in the original document.")
    asset_type: AssetType = Field(..., description="The asset type of the source document.")
    score: float = Field(..., description="The relevance score from the vector search.")

class AutomationPayload(BaseModel):
    """The structured JSON payload sent to the external n8n webhook."""
    severity: Severity = Field(..., description="The severity level of the alert.")
    region: str = Field(..., description="The region where the alert applies.")
    asset_type: str = Field(..., description="The asset concerned (CROP/LIVESTOCK).")
    message: str = Field(..., description="The brief alert message and recommended immediate action.")

# Model Context Protocol (MCP) Schema 

class MCPContext(BaseModel):
    """
    The central data model for the Model Context Protocol (MCP).
    This serves as the shared memory bus for all agents in the CrewAI pipeline.
    """
    session_id: str
    timestamp: datetime = Field(default_factory=datetime.now)

    #  Orchestrator-Filled Context
    query: str = Field(description="The original user query.")
    region: str = Field(description="The geographical region/location.")
    asset_type: AssetType = Field(AssetType.GENERAL, description="Classified asset type: CROP, LIVESTOCK, or GENERAL.")
    asset_name: Optional[str] = Field(None, description="Specific asset (e.g., maize, cattle).")
    intent: IntentType = Field(IntentType.GENERAL_ADVICE, description="The classified query intent.")

    # knowledge Agent-Filled Context
    retrieved_context: List[SourceDocument] = Field(default_factory=list, description="List of structured document chunks from RAG.")

    # Environmental Agent-Filled Context
    regional_data: Dict[str, Any] = Field(default_factory=dict, description="Real-time weather, market prices, and seasonal data.")

    #Diagnostic Agent-Filled Context
    final_diagnosis: str = Field(default="Diagnosis pending.", description="The final, synthesized, localized agricultural recommendation/diagnosis.")
    
    #Action Agent-Filled Context
    alert_triggered: bool = Field(default=False, description="True if a critical alert was sent.")
    alert_severity: Optional[Severity] = Field(None, description="Severity of the triggered alert.")
    alert_payload_detail: Dict[str, Any] = Field(default_factory=dict, description="Structured details that the Action Agent determined to send to the webhook.")

    def __str__(self):
        """Placeholder for clean summary (actual summary logic is in mcp_client.py)"""
        return f"MCPContext for Session {self.session_id}" 

# API Input/Output Schemas 

class QueryRequest(BaseModel):
    """Input model for the main /advise API endpoint."""
    query: str = Field(..., description="The farmer's question or observation.")
    region: str = Field(..., description="The geographical region relevant to the query.")

class QueryResponse(BaseModel):
    """Output model for the main /advise API endpoint."""
    session_id: str = Field(..., description="Unique ID for the completed session.")
    advice: str = Field(..., description="The final, comprehensive, localized advice generated by the system.")
    alert_status: str = Field(..., description="Status of the critical alert check (e.g., 'Alert Not Needed', 'HIGH Alert Sent').")
    
class IngestionResponse(BaseModel):
    """Output model for data ingestion endpoints."""
    status: Literal["success", "failure"] = Field("success", description="Status of the ingestion pipeline run.")
    message: str = Field(..., description="Detailed message about the ingestion process.")